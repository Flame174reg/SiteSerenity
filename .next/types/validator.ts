// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\src\app\account\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\account\\page.js")
  handler satisfies AppPageConfig<"/account">
}

// Validate ..\..\src\app\admin\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\admin\\page.js")
  handler satisfies AppPageConfig<"/admin">
}

// Validate ..\..\src\app\contracts\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\contracts\\page.js")
  handler satisfies AppPageConfig<"/contracts">
}

// Validate ..\..\src\app\dashboard\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\dashboard\\page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ..\..\src\app\guides\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\guides\\page.js")
  handler satisfies AppPageConfig<"/guides">
}

// Validate ..\..\src\app\memos\anti\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\memos\\anti\\page.js")
  handler satisfies AppPageConfig<"/memos/anti">
}

// Validate ..\..\src\app\memos\gov\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\memos\\gov\\page.js")
  handler satisfies AppPageConfig<"/memos/gov">
}

// Validate ..\..\src\app\memos\interrogations\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\memos\\interrogations\\page.js")
  handler satisfies AppPageConfig<"/memos/interrogations">
}

// Validate ..\..\src\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\src\app\r\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\r\\page.js")
  handler satisfies AppPageConfig<"/r">
}

// Validate ..\..\src\app\rules2\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\rules2\\page.js")
  handler satisfies AppPageConfig<"/rules2">
}

// Validate ..\..\src\app\rules\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\rules\\page.js")
  handler satisfies AppPageConfig<"/rules">
}

// Validate ..\..\src\app\weekly\[category]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\weekly\\[category]\\page.js")
  handler satisfies AppPageConfig<"/weekly/[category]">
}

// Validate ..\..\src\app\weekly\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\weekly\\page.js")
  handler satisfies AppPageConfig<"/weekly">
}

// Validate ..\..\src\app\api\admin\debug\upsert-self\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\admin\\debug\\upsert-self\\route.js")
  handler satisfies RouteHandlerConfig<"/api/admin/debug/upsert-self">
}

// Validate ..\..\src\app\api\admin\roles\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\admin\\roles\\route.js")
  handler satisfies RouteHandlerConfig<"/api/admin/roles">
}

// Validate ..\..\src\app\api\admin\seen\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\admin\\seen\\route.js")
  handler satisfies RouteHandlerConfig<"/api/admin/seen">
}

// Validate ..\..\src\app\api\admin\super\toggle\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\admin\\super\\toggle\\route.js")
  handler satisfies RouteHandlerConfig<"/api/admin/super/toggle">
}

// Validate ..\..\src\app\api\admin\toggle\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\admin\\toggle\\route.js")
  handler satisfies RouteHandlerConfig<"/api/admin/toggle">
}

// Validate ..\..\src\app\api\admin\uploaders\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\admin\\uploaders\\route.js")
  handler satisfies RouteHandlerConfig<"/api/admin/uploaders">
}

// Validate ..\..\src\app\api\admin\users\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\admin\\users\\route.js")
  handler satisfies RouteHandlerConfig<"/api/admin/users">
}

// Validate ..\..\src\app\api\auth\[...nextauth]\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\auth\\[...nextauth]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/[...nextauth]">
}

// Validate ..\..\src\app\api\health\db\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\health\\db\\route.js")
  handler satisfies RouteHandlerConfig<"/api/health/db">
}

// Validate ..\..\src\app\api\health\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\health\\route.js")
  handler satisfies RouteHandlerConfig<"/api/health">
}

// Validate ..\..\src\app\api\health\session\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\health\\session\\route.js")
  handler satisfies RouteHandlerConfig<"/api/health/session">
}

// Validate ..\..\src\app\api\photo\can-upload\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\photo\\can-upload\\route.js")
  handler satisfies RouteHandlerConfig<"/api/photo/can-upload">
}

// Validate ..\..\src\app\api\photo\list\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\photo\\list\\route.js")
  handler satisfies RouteHandlerConfig<"/api/photo/list">
}

// Validate ..\..\src\app\api\photo\upload\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\photo\\upload\\route.js")
  handler satisfies RouteHandlerConfig<"/api/photo/upload">
}

// Validate ..\..\src\app\api\weekly\album\caption\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\weekly\\album\\caption\\route.js")
  handler satisfies RouteHandlerConfig<"/api/weekly/album/caption">
}

// Validate ..\..\src\app\api\weekly\caption\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\weekly\\caption\\route.js")
  handler satisfies RouteHandlerConfig<"/api/weekly/caption">
}

// Validate ..\..\src\app\api\weekly\delete\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\weekly\\delete\\route.js")
  handler satisfies RouteHandlerConfig<"/api/weekly/delete">
}

// Validate ..\..\src\app\api\weekly\folder\caption\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\weekly\\folder\\caption\\route.js")
  handler satisfies RouteHandlerConfig<"/api/weekly/folder/caption">
}

// Validate ..\..\src\app\api\weekly\folder\create\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\weekly\\folder\\create\\route.js")
  handler satisfies RouteHandlerConfig<"/api/weekly/folder/create">
}

// Validate ..\..\src\app\api\weekly\folder\delete\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\weekly\\folder\\delete\\route.js")
  handler satisfies RouteHandlerConfig<"/api/weekly/folder/delete">
}

// Validate ..\..\src\app\api\weekly\folders\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\weekly\\folders\\route.js")
  handler satisfies RouteHandlerConfig<"/api/weekly/folders">
}

// Validate ..\..\src\app\api\weekly\list\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\weekly\\list\\route.js")
  handler satisfies RouteHandlerConfig<"/api/weekly/list">
}

// Validate ..\..\src\app\api\weekly\photo\delete\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\weekly\\photo\\delete\\route.js")
  handler satisfies RouteHandlerConfig<"/api/weekly/photo/delete">
}

// Validate ..\..\src\app\api\weekly\upload\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\weekly\\upload\\route.js")
  handler satisfies RouteHandlerConfig<"/api/weekly/upload">
}





// Validate ..\..\src\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
